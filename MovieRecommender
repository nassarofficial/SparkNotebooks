{"paragraphs":[{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala","title":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463241441864_569329167","id":"20160514-185721_1856683670","dateCreated":"May 14, 2016 6:57:21 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:442","text":"//","dateUpdated":"May 14, 2016 6:58:01 PM","dateFinished":"May 14, 2016 6:58:01 PM","dateStarted":"May 14, 2016 6:58:01 PM","title":"Movie Recommender","result":{"code":"SUCCESS","type":"TEXT","msg":""}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463232505036_-1166235821","id":"20160514-162825_399959945","dateCreated":"May 14, 2016 4:28:25 PM","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:26","text":"import scala.io.Source\nimport java.io.File\n\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd._\nimport org.apache.spark.mllib.recommendation.{ALS, Rating, MatrixFactorizationModel}\n\n","dateUpdated":"May 14, 2016 6:06:34 PM","dateFinished":"May 14, 2016 6:06:36 PM","dateStarted":"May 14, 2016 6:06:34 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"import scala.io.Source\nimport java.io.File\nimport org.apache.spark.SparkConf\nimport org.apache.spark.SparkContext\nimport org.apache.spark.SparkContext._\nimport org.apache.spark.rdd._\nimport org.apache.spark.mllib.recommendation.{ALS, Rating, MatrixFactorizationModel}\n"},"focus":true},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463233822956_-851439010","id":"20160514-165022_1531833132","dateCreated":"May 14, 2016 4:50:22 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:197","text":"  /** Compute RMSE (Root Mean Squared Error). */\n  def computeRmse(model: MatrixFactorizationModel, data: RDD[Rating], n: Long): Double = {\n    val predictions: RDD[Rating] = model.predict(data.map(x => (x.user, x.product)))\n    val predictionsAndRatings = predictions.map(x => ((x.user, x.product), x.rating))\n      .join(data.map(x => ((x.user, x.product), x.rating)))\n      .values\n    math.sqrt(predictionsAndRatings.map(x => (x._1 - x._2) * (x._1 - x._2)).reduce(_ + _) / n)\n  }\n\n  /** Load ratings from file. */\n  def loadRatings(path: String): Seq[Rating] = {\n    val lines = Source.fromFile(path).getLines()\n    val ratings = lines.map { line =>\n      val fields = line.split(\"::\")\n      Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble)\n    }.filter(_.rating > 0.0)\n    if (ratings.isEmpty) {\n      sys.error(\"No ratings provided.\")\n    } else {\n      ratings.toSeq\n    }\n  }","dateUpdated":"May 14, 2016 6:05:20 PM","dateFinished":"May 14, 2016 6:05:21 PM","dateStarted":"May 14, 2016 6:05:20 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"computeRmse: (model: org.apache.spark.mllib.recommendation.MatrixFactorizationModel, data: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating], n: Long)Double\nloadRatings: (path: String)Seq[org.apache.spark.mllib.recommendation.Rating]\n"}},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463232519766_2104529903","id":"20160514-162839_541990812","dateCreated":"May 14, 2016 4:28:39 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:73","dateUpdated":"May 14, 2016 6:05:45 PM","dateFinished":"May 14, 2016 6:05:45 PM","dateStarted":"May 14, 2016 6:05:45 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"myRatings: Seq[org.apache.spark.mllib.recommendation.Rating] = Stream(Rating(0,1,5.0), ?)\nmyRatingsRDD: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = ParallelCollectionRDD[71] at parallelize at <console>:76\nmovieLensHomeDir: String = /Users/nassar/Desktop/NU Adv Big Data/Datasets/ml-1m\n"},"text":"////  Rec\n\n\n    val myRatings = loadRatings(\"/Users/nassar/Desktop/NU Adv Big Data/Labs/movie recommender/machine-learning/bin/personalRatings.txt\")\n    val myRatingsRDD = sc.parallelize(myRatings, 1)\n\n    // load ratings and movie titles\n\n    val movieLensHomeDir = \"/Users/nassar/Desktop/NU Adv Big Data/Datasets/ml-1m\""},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463233120740_-1171348115","id":"20160514-163840_894632957","dateCreated":"May 14, 2016 4:38:40 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:129","dateUpdated":"May 14, 2016 6:06:38 PM","dateFinished":"May 14, 2016 6:06:39 PM","dateStarted":"May 14, 2016 6:06:38 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"ratings: org.apache.spark.rdd.RDD[(Long, org.apache.spark.mllib.recommendation.Rating)] = MapPartitionsRDD[74] at map at <console>:85\nmovies: scala.collection.immutable.Map[Int,String] = Map(2163 -> Attack of the Killer Tomatoes! (1980), 645 -> Nelly & Monsieur Arnaud (1995), 892 -> Twelfth Night (1996), 69 -> Friday (1995), 2199 -> Phoenix (1998), 3021 -> Funhouse, The (1981), 1322 -> Amityville 1992: It's About Time (1992), 1665 -> Bean (1997), 1036 -> Die Hard (1988), 2822 -> Medicine Man (1992), 2630 -> Besieged (L' Assedio) (1998), 3873 -> Cat Ballou (1965), 1586 -> G.I. Jane (1997), 1501 -> Keys to Tulsa (1997), 2452 -> Gate II: Trespassers, The (1990), 809 -> Fled (1996), 1879 -> Hanging Garden, The (1997), 1337 -> Body Snatcher, The (1945), 1718 -> Stranger in the House (1997), 2094 -> Rocketeer, The (1991), 3944 -> Bootmen (2000), 1411 -> Hamlet (1996), 629 -> Rude (1995), 3883 -> Catfish in Black Bean Sauce ..."},"text":"    val ratings = sc.textFile(new File(movieLensHomeDir, \"ratings.dat\").toString).map { line =>\n      val fields = line.split(\"::\")\n      // format: (timestamp % 10, Rating(userId, movieId, rating))\n      (fields(3).toLong % 10, Rating(fields(0).toInt, fields(1).toInt, fields(2).toDouble))\n    }\n\n    val movies = sc.textFile(new File(movieLensHomeDir, \"movies.dat\").toString).map { line =>\n      val fields = line.split(\"::\")\n      // format: (movieId, movieName)\n      (fields(0).toInt, fields(1))\n    }.collect().toMap\n\n"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true,"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463233122514_-461101645","id":"20160514-163842_821274870","dateCreated":"May 14, 2016 4:38:42 PM","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:146","dateUpdated":"May 14, 2016 6:43:13 PM","dateFinished":"May 14, 2016 6:44:26 PM","dateStarted":"May 14, 2016 6:43:13 PM","result":{"code":"SUCCESS","type":"TEXT","msg":"numRatings: Long = 1000209\nnumUsers: Long = 6040\nnumMovies: Long = 3706\nGot 1000209 ratings from 6040 users on 3706 movies.\nnumPartitions: Int = 4\ntraining: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[2647] at repartition at <console>:98\nvalidation: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[2653] at repartition at <console>:91\ntest: org.apache.spark.rdd.RDD[org.apache.spark.mllib.recommendation.Rating] = MapPartitionsRDD[2655] at values at <console>:87\nnumTraining: Long = 602249\nnumValidation: Long = 198919\nnumTest: Long = 199049\nTraining: 602249, validation: 198919, test: 199049\nranks: List[Int] = List(8, 12)\nlambdas: List[Double] = List(0.1, 10.0)\nnumIters: List[Int] = List(10, 20)\nbestModel: Option[org.apache.spark.mllib.recommendation.MatrixFactorizationModel] = None\nbestValidationRmse: Double = 1.7976931348623157E308\nbestRank: Int = 0\nbestLambda: Double = -1.0\nbestNumIter: Int = -1\nRMSE (validation) = 0.8800199501360139 for the model trained with rank = 8, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8728700904212167 for the model trained with rank = 8, lambda = 0.1, and numIter = 20.\nRMSE (validation) = 3.7558695311242833 for the model trained with rank = 8, lambda = 10.0, and numIter = 10.\nRMSE (validation) = 3.7558695311242833 for the model trained with rank = 8, lambda = 10.0, and numIter = 20.\nRMSE (validation) = 0.8752543239055092 for the model trained with rank = 12, lambda = 0.1, and numIter = 10.\nRMSE (validation) = 0.8710305265063324 for the model trained with rank = 12, lambda = 0.1, and numIter = 20.\nRMSE (validation) = 3.7558695311242833 for the model trained with rank = 12, lambda = 10.0, and numIter = 10.\nRMSE (validation) = 3.7558695311242833 for the model trained with rank = 12, lambda = 10.0, and numIter = 20.\ntestRmse: Double = 0.8690253329676353\nThe best model was trained with rank = 12 and lambda = 0.1, and numIter = 20, and its RMSE on the test set is 0.8690253329676353.\n"},"text":"    val numRatings = ratings.count()\n    val numUsers = ratings.map(_._2.user).distinct().count()\n    val numMovies = ratings.map(_._2.product).distinct().count()\n\n    println(\"Got \" + numRatings + \" ratings from \"\n      + numUsers + \" users on \" + numMovies + \" movies.\")\n\n    // split ratings into train (60%), validation (20%), and test (20%) based on the \n    // last digit of the timestamp, add myRatings to train, and cache them\n\n    val numPartitions = 4\n    val training = ratings.filter(x => x._1 < 6)\n      .values\n      .union(myRatingsRDD)\n      .repartition(numPartitions)\n      .cache()\n    val validation = ratings.filter(x => x._1 >= 6 && x._1 < 8)\n      .values\n      .repartition(numPartitions)\n      .cache()\n    val test = ratings.filter(x => x._1 >= 8).values.cache()\n\n    val numTraining = training.count()\n    val numValidation = validation.count()\n    val numTest = test.count()\n\n    println(\"Training: \" + numTraining + \", validation: \" + numValidation + \", test: \" + numTest)\n\n    // train models and evaluate them on the validation set\n\n    val ranks = List(8, 12)\n    val lambdas = List(0.1, 10.0)\n    val numIters = List(10, 20)\n    var bestModel: Option[MatrixFactorizationModel] = None\n    var bestValidationRmse = Double.MaxValue\n    var bestRank = 0\n    var bestLambda = -1.0\n    var bestNumIter = -1\n    for (rank <- ranks; lambda <- lambdas; numIter <- numIters) {\n      val model = ALS.train(training, rank, numIter, lambda)\n      val validationRmse = computeRmse(model, validation, numValidation)\n      println(\"RMSE (validation) = \" + validationRmse + \" for the model trained with rank = \" \n        + rank + \", lambda = \" + lambda + \", and numIter = \" + numIter + \".\")\n      if (validationRmse < bestValidationRmse) {\n        bestModel = Some(model)\n        bestValidationRmse = validationRmse\n        bestRank = rank\n        bestLambda = lambda\n        bestNumIter = numIter\n      }\n    }\n\n    // evaluate the best model on the test set\n\n    val testRmse = computeRmse(bestModel.get, test, numTest)\n\n    println(\"The best model was trained with rank = \" + bestRank + \" and lambda = \" + bestLambda\n      + \", and numIter = \" + bestNumIter + \", and its RMSE on the test set is \" + testRmse + \".\")\n\n    // create a naive baseline and compare it with the best model\n"},{"config":{"colWidth":12,"graph":{"mode":"table","height":300,"optionOpen":false,"keys":[],"values":[],"groups":[],"scatter":{}},"enabled":true},"settings":{"params":{},"forms":{}},"jobName":"paragraph_1463240274483_269359654","id":"20160514-183754_934623536","dateCreated":"May 14, 2016 6:37:54 PM","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:315"}],"name":"Movie Recommender","id":"2BJTY6JAZ","angularObjects":{"2BM7EN9ES":[],"2BNEDU7BV":[],"2BK8HH6ZN":[],"2BMZ7Y1QE":[],"2BJCMPB95":[],"2BKYJ7CMJ":[],"2BJZS8HDD":[],"2BM3YR6Q2":[],"2BNKBTPQ1":[],"2BJNJAUGH":[],"2BJMR91KS":[],"2BK4Z9J2V":[],"2BJU9792N":[],"2BHVHQ9Z3":[]},"config":{"looknfeel":"default"},"info":{}}